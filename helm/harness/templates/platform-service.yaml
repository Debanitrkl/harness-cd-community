apiVersion: v1
kind: ConfigMap
metadata:
  name: platform-service
data:
  AUDIT_CLIENT_BASEURL: http://proxy/audit/api/
  AUDIT_ENABLED: 'false'
  COMMON_POOL_CORE_SIZE: '1'
  COMMON_POOL_MAX_SIZE: '2'
  DEPLOY_MODE: KUBERNETES_ONPREM
  DEPLOY_VERSION: COMMUNITY
  DISABLE_RESOURCE_VALIDATION: 'true'
  DISTRIBUTED_LOCK_IMPLEMENTATION: REDIS
  ENABLE_AUDIT_SERVICE: 'false'
  ENABLE_RESOURCE_GROUP: 'false'
  ENABLE_SERIALGC: 'true'
  EVENTS_FRAMEWORK_NETTY_THREADS: '1'
  EVENTS_FRAMEWORK_REDIS_URL: redis://redis:6379
  GRPC_MANAGER_AUTHORITY: default-authority.harness.io
  GRPC_MANAGER_TARGET: manager:9879
  JAVA_ADVANCED_FLAGS: -XX:-TieredCompilation
  LOCK_CONFIG_REDIS_URL: redis://redis:6379
  LOGGING_LEVEL: WARN
  MANAGER_CLIENT_BASEURL: http://proxy/api/
  MEMORY: '{{ .Values.platform.memory }}m'
  MOCK_ACCESS_CONTROL_SERVICE: 'true'
  NG_MANAGER_CLIENT_BASEURL: http://proxy/ng/api/
  PIPELINE_SERVICE_CLIENT_BASEURL: http://proxy/pipeline/api/
  RBAC_URL: http://proxy/ng/api/
  REDIS_NETTY_THREADS: '1'
  RESOURCE_GROUP_CLIENT_BASE_URL: http://proxy/resourcegroup/api/
  SERVER_MAX_THREADS: '12'
  SMTP_HOST: ''
  SMTP_PASSWORD: ''
  SMTP_PORT: '465'
  SMTP_USERNAME: ''
  SMTP_USE_SSL: 'true'

---

apiVersion: v1
kind: Secret
metadata:
  name: platform-service
stringData:
  MONGO_URI: 'mongodb://admin:dOkcGof8zL@mongodb-replicaset-chart.{{ .Release.Namespace }}.svc/notifications?authSource=admin'
  AUDIT_MONGO_URI: 'mongodb://admin:dOkcGof8zL@mongodb-replicaset-chart.{{ .Release.Namespace }}.svc/audits?authSource=admin'
  RESOURCE_GROUP_MONGO_URI: 'mongodb://admin:dOkcGof8zL@mongodb-replicaset-chart.{{ .Release.Namespace }}.svc/resource-groups?authSource=admin'
type: Opaque

---

apiVersion: v1
kind: Service
metadata:
  name: platform-service
spec:
  ports:
  - name: http
    port: 9005
  selector:
    app: platform-service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: platform-service
  labels:
    app: platform-service
spec:
  selector:
    matchLabels:
      app: platform-service
  template:
    metadata:
      labels:
        app: platform-service
    spec:
      serviceAccountName: harness-default
      initContainers:
        - name: check-for-mongo
          image: harness/mongo:{{ .Values.versions.mongo }}
          command: ['sh', '-c', "until mongo \"$(cat /config/MONGO_URI)\" --eval \"db.adminCommand('ping')\"; do echo waiting for mongodb; sleep 2; done"]
          volumeMounts:
            - name: mongo-config
              mountPath: /config
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
      containers:
      - name: platform-service
        image: harness/platform-service-signed:{{ .Values.versions.manager }}
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 65534
          runAsNonRoot: true        
        ports:
        - name: http
          containerPort: 9005
          protocol: "TCP"     
        envFrom:
        - configMapRef:
            name: platform-service
        - secretRef:
            name: platform-service
        readinessProbe:
          httpGet:
            path: /api/health
            port: 9005
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 20
        livenessProbe:
          httpGet:
            path: /api/health
            port: 9005
          initialDelaySeconds: 90
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 20
      volumes:
        - name: mongo-config
          secret:
            secretName: platform-service
            items:
              - key: MONGO_URI
                path: MONGO_URI
